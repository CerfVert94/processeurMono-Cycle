library ieee;
use ieee.STD_LOGIC_1164.all;
use ieee.STD_LOGIC_unsigned.all;
use ieee.numeric_std.all;
use work.common.all;
 
ENTITY MonoProcessor IS 
PORT(
  Clk : IN STD_LOGIC;
  Rst : IN STD_LOGIC;
);
END MonoProcessor;


ARCHITECTURE Structural OF Instruction_Decoder IS
signal instr_courante: enum_instruction; 
SIGNAL MuxSel : STD_LOGIC_VECTOR(7 downto 0);

BEGIN
	label_instr : process(Instruction)
	begin
 	case Instruction(31 downto 24) is
 	  --Traitement des donnÃ©es
 	  when x"E3" =>
 	    case instruction(23 downto 20) is
   	    when x"A" =>
 	        instr_courante <= MOV;
 	      when x"5" =>
     	    instr_courante <= CMP;
 	      when others =>
 	        instr_courante <= ERR;
 	    end case;
 	  when x"E0" =>
 	    instr_courante <= ADDr;
 	  when x"E2" =>
 	    instr_courante <= ADDi;
 	  --Acess Memoire
 	  when x"E6" =>
 	    case instruction(23 downto 20) is
   	    when x"0" =>
 	        instr_courante <= STR;
     	  when x"1" => 
 	        instr_courante <= LDR;
 	      when others =>
 	        instr_courante <= ERR;
 	    end case;
 	  --Branchement
 	  when X"EA" =>
 	    instr_courante <= BAL;
 	  when X"BA" =>
 	    instr_courante <= BLT;
 	  when others =>
 	    instr_courante <= ERR;
 	end case;
  end process;
  stimulus : process(Instruction)
  begin
 	case Instruction(31 downto 20) is
 	  --Traitement des donnÃ©es
 	  when x"E3A" =>
	    MuxSel <= muxsel_mov;
		RW <= Instruction(15 downto 12);
		RegSel <= '0';
 	  when x"E08" =>
	    MuxSel<= muxsel_addr;
		RA <= Instruction(3 downto 0);
		RB <= Instruction(15 downto 12);
		RW <= Instruction(19 downto 16);
		RegSel <= '0';
 	  when x"E28" =>
 	    MuxSel<= muxsel_addi;
		RA <= Instruction(3 downto 0);
		RW <= Instruction(19 downto 16);
		RegSel <= '0';
	  when x"E35" =>
	    MuxSel <= muxsel_comp;
		RA <= Instruction(3 downto 0);
		RW <= Instruction(19 downto 16);
		RegSel <= '0';
	  --Acess Memoire
 	  when x"E61" =>
		MuxSel<= muxsel_ldr;
		RA <= Instruction(15 downto 12);
		RW <= Instruction(19 downto 16);
		RegSel <= '0';
 	  when x"E60" =>
		MuxSel<= muxsel_str;
		RA <= Instruction(15 downto 12);
		RW <= Instruction(19 downto 16);
		RegSel <= '0';
 	  --Branchement
 	  when "11101010XXXX" =>
		MuxSel <= muxsel_bal;
		RegSel <= '0';
 	  when "10111010XXXX" =>
	    MuxSel<= muxsel_blt;
		RegSel <= '0';
 	  when others =>
 	end case;
  end process;
  nPCSEL <= MuxSel(0);
  RegWr <= MuxSel(1);
  ALUSrc <= MuxSel(2);
  ALUCtr <= MuxSel(4 downto 3);
  PSREn <= MuxSel(5);
  MemWr <= MuxSel(6);
  WrSrc <= MuxSel(7);
  instr_type <= instr_courante;
END Structural;